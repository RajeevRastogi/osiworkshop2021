From ddc23bd716b3e361ef9eb15b9fb3ead7018c5e11 Mon Sep 17 00:00:00 2001
From: SURYA SUMANTH N <ssumanth21@gmail.com>
Date: Wed, 6 Oct 2021 19:05:24 +0530
Subject: [PATCH] Add random function taking range min max

---
 .../operator/scalar/MathFunctions.java        | 36 +++++++++++++++++++
 .../operator/scalar/TestMathFunctions.java    | 33 +++++++++++++++++
 2 files changed, 69 insertions(+)

diff --git a/presto-main/src/main/java/io/prestosql/operator/scalar/MathFunctions.java b/presto-main/src/main/java/io/prestosql/operator/scalar/MathFunctions.java
index 7e292da3..b1d3430d 100644
--- a/presto-main/src/main/java/io/prestosql/operator/scalar/MathFunctions.java
+++ b/presto-main/src/main/java/io/prestosql/operator/scalar/MathFunctions.java
@@ -1247,6 +1247,42 @@ public final class MathFunctions
         return dotProduct / (normLeftMap * normRightMap);
     }
 
+    @Description("A pseudo-random number between start and stop (exclusive)")
+    @ScalarFunction(value = "random", alias = "rand", deterministic = false)
+    @SqlType(StandardTypes.TINYINT)
+    public static long randomTinyint(@SqlType(StandardTypes.TINYINT) long start, @SqlType(StandardTypes.TINYINT) long stop)
+    {
+        checkCondition(start < stop, INVALID_FUNCTION_ARGUMENT, "start value must be less than stop value");
+        return ThreadLocalRandom.current().nextLong(start, stop);
+    }
+
+    @Description("A pseudo-random number between start and stop (exclusive)")
+    @ScalarFunction(value = "random", alias = "rand", deterministic = false)
+    @SqlType(StandardTypes.SMALLINT)
+    public static long randomSmallint(@SqlType(StandardTypes.SMALLINT) long start, @SqlType(StandardTypes.SMALLINT) long stop)
+    {
+        checkCondition(start < stop, INVALID_FUNCTION_ARGUMENT, "start value must be less than stop value");
+        return ThreadLocalRandom.current().nextInt((int) start, (int) stop);
+    }
+
+    @Description("A pseudo-random number between start and stop (exclusive)")
+    @ScalarFunction(value = "random", alias = "rand", deterministic = false)
+    @SqlType(StandardTypes.INTEGER)
+    public static long randomInteger(@SqlType(StandardTypes.INTEGER) long start, @SqlType(StandardTypes.INTEGER) long stop)
+    {
+        checkCondition(start < stop, INVALID_FUNCTION_ARGUMENT, "start value must be less than stop value");
+        return ThreadLocalRandom.current().nextInt((int) start, (int) stop);
+    }
+
+    @Description("A pseudo-random number between start and stop (exclusive)")
+    @ScalarFunction(value = "random", alias = "rand", deterministic = false)
+    @SqlType(StandardTypes.BIGINT)
+    public static long random(@SqlType(StandardTypes.BIGINT) long start, @SqlType(StandardTypes.BIGINT) long stop)
+    {
+        checkCondition(start < stop, INVALID_FUNCTION_ARGUMENT, "start value must be less than stop value");
+        return ThreadLocalRandom.current().nextLong(start, stop);
+    }
+
     private static double mapDotProduct(Block leftMap, Block rightMap)
     {
         TypedSet rightMapKeys = new TypedSet(VARCHAR, rightMap.getPositionCount(), "cosine_similarity");
diff --git a/presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java b/presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java
index 06813af4..ede1715e 100644
--- a/presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java
+++ b/presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java
@@ -1390,4 +1390,37 @@ public class TestMathFunctions
 
         assertFunction("wilson_interval_upper(1250, 1310, 1.96e0)", DOUBLE, 0.9642524717143908);
     }
+
+    @Test
+    public void testRandomRange()
+    {
+        functionAssertions.tryEvaluateWithAll("random(TINYINT '3', TINYINT '5')", TINYINT, TEST_SESSION);
+        functionAssertions.tryEvaluateWithAll("random(TINYINT '-3', TINYINT '-1')", TINYINT, TEST_SESSION);
+        functionAssertions.tryEvaluateWithAll("random(TINYINT '-3', TINYINT '5')", TINYINT, TEST_SESSION);
+        functionAssertions.tryEvaluateWithAll("random(SMALLINT '20000', SMALLINT '30000')", SMALLINT, TEST_SESSION);
+        functionAssertions.tryEvaluateWithAll("random(SMALLINT '-20000', SMALLINT '-10000')", SMALLINT, TEST_SESSION);
+        functionAssertions.tryEvaluateWithAll("random(SMALLINT '-20000', SMALLINT '30000')", SMALLINT, TEST_SESSION);
+        functionAssertions.tryEvaluateWithAll("random(1000, 2000)", INTEGER, TEST_SESSION);
+        functionAssertions.tryEvaluateWithAll("random(-10, -5)", INTEGER, TEST_SESSION);
+        functionAssertions.tryEvaluateWithAll("random(-10, 10)", INTEGER, TEST_SESSION);
+        functionAssertions.tryEvaluateWithAll("random(-3000000000, -2000000000)", BIGINT, TEST_SESSION);
+        functionAssertions.tryEvaluateWithAll("random(-3000000000, 5000000000)", BIGINT, TEST_SESSION);
+
+        assertInvalidFunction("random(TINYINT '5', TINYINT '3')", "start value must be less than stop value");
+        assertInvalidFunction("random(TINYINT '5', TINYINT '5')", "start value must be less than stop value");
+        assertInvalidFunction("random(TINYINT '-5', TINYINT '-10')", "start value must be less than stop value");
+        assertInvalidFunction("random(TINYINT '-5', TINYINT '-5')", "start value must be less than stop value");
+        assertInvalidFunction("random(SMALLINT '30000', SMALLINT '10000')", "start value must be less than stop value");
+        assertInvalidFunction("random(SMALLINT '30000', SMALLINT '30000')", "start value must be less than stop value");
+        assertInvalidFunction("random(SMALLINT '-30000', SMALLINT '-31000')", "start value must be less than stop value");
+        assertInvalidFunction("random(SMALLINT '-30000', SMALLINT '-30000')", "start value must be less than stop value");
+        assertInvalidFunction("random(1000, 500)", "start value must be less than stop value");
+        assertInvalidFunction("random(500, 500)", "start value must be less than stop value");
+        assertInvalidFunction("random(-500, -600)", "start value must be less than stop value");
+        assertInvalidFunction("random(-500, -500)", "start value must be less than stop value");
+        assertInvalidFunction("random(3000000000, 1000000000)", "start value must be less than stop value");
+        assertInvalidFunction("random(3000000000, 3000000000)", "start value must be less than stop value");
+        assertInvalidFunction("random(-3000000000, -4000000000)", "start value must be less than stop value");
+        assertInvalidFunction("random(-3000000000, -3000000000)", "start value must be less than stop value");
+    }
 }
-- 
2.25.1

